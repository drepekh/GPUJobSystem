#version 450

layout (local_size_x_id = 0, local_size_y_id = 1) in;
layout (binding = 0, rgba8) uniform readonly image2D inputImage;
layout (binding = 1, rgba8) uniform image2D resultImage;

const float[9] kernel = {
	-1.0/8.0, -1.0/8.0, -1.0/8.0,
	-1.0/8.0,  1.0    , -1.0/8.0,
	-1.0/8.0, -1.0/8.0, -1.0/8.0
};

float proc(in float sum, in float denom, in float offset) 
{
   return clamp(sum / denom + offset, 0.0, 1.0);
}

void main()
{
	uint n = 0;
	float sum = 0.0;
	for (int i =- 1; i < 2; ++i)
	{
		for (int j =- 1; j < 2; ++j)
		{
			vec3 rgb = imageLoad(inputImage, ivec2(gl_GlobalInvocationID.x + i, gl_GlobalInvocationID.y + j)).rgb;
			sum += ((rgb.r + rgb.g + rgb.b) / 3.0) * kernel[n];
			++n;
		}
	}

	vec4 res = vec4(vec3(proc(sum, 0.1, 0.0)), 1.0);

	imageStore(resultImage, ivec2(gl_GlobalInvocationID.xy), res);
}